SQL> /*
RAY KRISHARDI LAYADI
RKLAY1 - 26445549
*/
SQL> -- Generated by Oracle SQL Developer Data Modeler 4.1.3.901
SQL> --   at:        2016-04-11 20:25:49 AEST
SQL> --   site:      Oracle Database 11g
SQL> --   type:      Oracle Database 11g
SQL> drop sequence diner_diner_num_seq ;

Error starting at line : 13 in command -
drop sequence diner_diner_num_seq 
Error report -
SQL Error: ORA-02289: sequence does not exist
02289. 00000 -  "sequence does not exist"
*Cause:    The specified sequence does not exist, or the user does
           not have the required privilege to perform this operation.
*Action:   Make sure the sequence name is correct, and that you have
           the right to perform the desired operation on this sequence.
SQL> drop sequence diner_food_item_diner_food_ite ;

Error starting at line : 15 in command -
drop sequence diner_food_item_diner_food_ite 
Error report -
SQL Error: ORA-02289: sequence does not exist
02289. 00000 -  "sequence does not exist"
*Cause:    The specified sequence does not exist, or the user does
           not have the required privilege to perform this operation.
*Action:   Make sure the sequence name is correct, and that you have
           the right to perform the desired operation on this sequence.
SQL> drop sequence food_item_food_item_num_seq ;

Error starting at line : 17 in command -
drop sequence food_item_food_item_num_seq 
Error report -
SQL Error: ORA-02289: sequence does not exist
02289. 00000 -  "sequence does not exist"
*Cause:    The specified sequence does not exist, or the user does
           not have the required privilege to perform this operation.
*Action:   Make sure the sequence name is correct, and that you have
           the right to perform the desired operation on this sequence.
SQL> drop sequence tables_tables_num_seq ;

Error starting at line : 19 in command -
drop sequence tables_tables_num_seq 
Error report -
SQL Error: ORA-02289: sequence does not exist
02289. 00000 -  "sequence does not exist"
*Cause:    The specified sequence does not exist, or the user does
           not have the required privilege to perform this operation.
*Action:   Make sure the sequence name is correct, and that you have
           the right to perform the desired operation on this sequence.
SQL> drop
  table beverage cascade constraints ;

Error starting at line : 21 in command -
drop
  table beverage cascade constraints 
Error report -
SQL Error: ORA-00942: table or view does not exist
00942. 00000 -  "table or view does not exist"
*Cause:    
*Action:
SQL> drop
  table dessert cascade constraints ;

Error starting at line : 24 in command -
drop
  table dessert cascade constraints 
Error report -
SQL Error: ORA-00942: table or view does not exist
00942. 00000 -  "table or view does not exist"
*Cause:    
*Action:
SQL> drop
  table diner cascade constraints ;

Error starting at line : 27 in command -
drop
  table diner cascade constraints 
Error report -
SQL Error: ORA-00942: table or view does not exist
00942. 00000 -  "table or view does not exist"
*Cause:    
*Action:
SQL> drop
  table diner_food_item cascade constraints ;

Error starting at line : 30 in command -
drop
  table diner_food_item cascade constraints 
Error report -
SQL Error: ORA-00942: table or view does not exist
00942. 00000 -  "table or view does not exist"
*Cause:    
*Action:
SQL> drop
  table entree cascade constraints ;

Error starting at line : 33 in command -
drop
  table entree cascade constraints 
Error report -
SQL Error: ORA-00942: table or view does not exist
00942. 00000 -  "table or view does not exist"
*Cause:    
*Action:
SQL> drop
  table food_item cascade constraints ;

Error starting at line : 36 in command -
drop
  table food_item cascade constraints 
Error report -
SQL Error: ORA-00942: table or view does not exist
00942. 00000 -  "table or view does not exist"
*Cause:    
*Action:
SQL> drop
  table large cascade constraints ;

Error starting at line : 39 in command -
drop
  table large cascade constraints 
Error report -
SQL Error: ORA-00942: table or view does not exist
00942. 00000 -  "table or view does not exist"
*Cause:    
*Action:
SQL> drop
  table main cascade constraints ;

Error starting at line : 42 in command -
drop
  table main cascade constraints 
Error report -
SQL Error: ORA-00942: table or view does not exist
00942. 00000 -  "table or view does not exist"
*Cause:    
*Action:
SQL> drop
  table seat cascade constraints ;

Error starting at line : 45 in command -
drop
  table seat cascade constraints 
Error report -
SQL Error: ORA-00942: table or view does not exist
00942. 00000 -  "table or view does not exist"
*Cause:    
*Action:
SQL> drop
  table small cascade constraints ;

Error starting at line : 48 in command -
drop
  table small cascade constraints 
Error report -
SQL Error: ORA-00942: table or view does not exist
00942. 00000 -  "table or view does not exist"
*Cause:    
*Action:
SQL> drop
  table tables cascade constraints ;

Error starting at line : 51 in command -
drop
  table tables cascade constraints 
Error report -
SQL Error: ORA-00942: table or view does not exist
00942. 00000 -  "table or view does not exist"
*Cause:    
*Action:
SQL> create
  table beverage
  (
    food_item_num number (5) not null ,
    alcohol_level number (5,2) not null
  ) ;

Table BEVERAGE created.

SQL> comment on column beverage.food_item_num
is
  'Unique number for each food item (ex: 1. omelette, etc)' ;

Comment on column beverage.food_item_num 'UNIQUE NUMBER FOR EACH FOOD ITEM EX: 1. OMELETTE, ETC)' succeeded.

SQL> comment on column beverage.alcohol_level
is
  'The percentage amount of alcohol contained in the beverage' ;

Comment on column beverage.alcohol_level 'THE PERCENTAGE AMOUNT OF ALCOHOL CONTAINED IN THE BEVERAGE' succeeded.

SQL> alter table beverage add constraint beverage_pk primary key ( food_item_num ) ;

Table BEVERAGE altered.

SQL> create
  table dessert
  (
    food_item_num           number (5) not null ,
    dessert_is_lactose_free char (1) not null
  ) ;

Table DESSERT created.

SQL> alter table dessert add constraint chk_dessert_is_lactose_free check (
dessert_is_lactose_free in ('N', 'Y')) ;

Table DESSERT altered.

SQL> comment on column dessert.food_item_num
is
  'Unique number for each food item (ex: 1. omelette, etc)' ;

Comment on column dessert.food_item_num 'UNIQUE NUMBER FOR EACH FOOD ITEM EX: 1. OMELETTE, ETC)' succeeded.

SQL> comment on column dessert.dessert_is_lactose_free
is
  'Determine whether the dessert is lactose free ("Y" = Yes, "N" = No)' ;

Comment on column dessert.dessert_is_lactose_free "Y" succeeded.

SQL> alter table dessert add constraint dessert_pk primary key ( food_item_num ) ;

Table DESSERT altered.

SQL> create
  table diner
  (
    diner_num number (5) not null
  ) ;

Table DINER created.

SQL> comment on column diner.diner_num
is
  'Unique number for each diner (in this case each diner number could be a representative for another diner)'
  ;

Comment on column diner.diner_num 'UNIQUE NUMBER FOR EACH DINER IN THIS CASE EACH DINER NUMBER COULD BE A REPRESENTATIVE FOR ANOTHER DINER)' succeeded.

SQL> alter table diner add constraint diner_pk primary key ( diner_num ) ;

Table DINER altered.

SQL> create
  table diner_food_item
  (
    diner_food_item_id   number (5) not null ,
    diner_num            number (5) not null ,
    food_item_num        number (5) not null ,
    diner_food_item_size char (1) not null
  ) ;

Table DINER_FOOD_ITEM created.

SQL> alter table diner_food_item add constraint chk_diner_food_item_size check (
diner_food_item_size in ('L', 'R', 'S')) ;

Table DINER_FOOD_ITEM altered.

SQL> comment on column diner_food_item.diner_food_item_id
is
  'Unique number for each food item that is being ordered by a particular diner'
  ;

Comment on column diner_food_item.diner_food_item_id 'UNIQUE NUMBER FOR EACH FOOD ITEM THAT IS BEING ORDERED BY A PARTICULAR DINER' succeeded.

SQL> comment on column diner_food_item.diner_num
is
  'Unique number for each diner (in this case each diner number could be a representative for another diner)'
  ;

Comment on column diner_food_item.diner_num 'UNIQUE NUMBER FOR EACH DINER IN THIS CASE EACH DINER NUMBER COULD BE A REPRESENTATIVE FOR ANOTHER DINER)' succeeded.

SQL> comment on column diner_food_item.food_item_num
is
  'Unique number for each food item (ex: 1. omelette, etc)' ;

Comment on column diner_food_item.food_item_num 'UNIQUE NUMBER FOR EACH FOOD ITEM EX: 1. OMELETTE, ETC)' succeeded.

SQL> comment on column diner_food_item.diner_food_item_size
is
  'Determine the serve size of the ordered food item ("R" = regular/standard, "S" = Small, "L" = Large)'
  ;

Comment on column diner_food_item.diner_food_item_size "R" succeeded.

SQL> alter table diner_food_item add constraint diner_food_item_pk primary key (
diner_food_item_id ) ;

Table DINER_FOOD_ITEM altered.

SQL> create
  table entree
  (
    food_item_num number (5) not null ,
    entree_type   char (1) not null
  ) ;

Table ENTREE created.

SQL> alter table entree add constraint chk_entree_type check ( entree_type in ('C',
'H')) ;

Table ENTREE altered.

SQL> comment on column entree.food_item_num
is
  'Unique number for each food item (ex: 1. omelette, etc)' ;

Comment on column entree.food_item_num 'UNIQUE NUMBER FOR EACH FOOD ITEM EX: 1. OMELETTE, ETC)' succeeded.

SQL> comment on column entree.entree_type
is
  'Determine whether the entree is cold or hot ("C" = Cold, "H" = Hot)' ;

Comment on column entree.entree_type "C" succeeded.

SQL> alter table entree add constraint entree_pk primary key ( food_item_num ) ;

Table ENTREE altered.

SQL> create
  table food_item
  (
    food_item_num              number (5) not null ,
    food_item_name             varchar2 (50) not null ,
    food_item_description      varchar2 (50) not null ,
    food_item_std_cost         number (14,2) not null ,
    food_item_std_energy_in_kj number (8,2) not null ,
    food_item_type             char (1) not null
  ) ;

Table FOOD_ITEM created.

SQL> alter table food_item add constraint chk_food_item_type check ( food_item_type
in ('B', 'D', 'E', 'M')) ;

Table FOOD_ITEM altered.

SQL> comment on column food_item.food_item_num
is
  'Unique number for each food item (ex: 1. omelette, etc)' ;

Comment on column food_item.food_item_num 'UNIQUE NUMBER FOR EACH FOOD ITEM EX: 1. OMELETTE, ETC)' succeeded.

SQL> comment on column food_item.food_item_name
is
  'Name of the food item' ;

Comment on column food_item.food_item_name 'NAME OF THE FOOD ITEM' succeeded.

SQL> comment on column food_item.food_item_description
is
  'Description for the food item' ;

Comment on column food_item.food_item_description 'DESCRIPTION FOR THE FOOD ITEM' succeeded.

SQL> comment on column food_item.food_item_std_cost
is
  'Price for the standard serve of a particular food item' ;

Comment on column food_item.food_item_std_cost 'PRICE FOR THE STANDARD SERVE OF A PARTICULAR FOOD ITEM' succeeded.

SQL> comment on column food_item.food_item_std_energy_in_kj
is
  'The approximate amount of energy (Kj) contained in the standard serve of a particular food item'
  ;

Comment on column food_item.food_item_std_energy_in_kj 'THE APPROXIMATE AMOUNT OF ENERGY KJ) CONTAINED IN THE STANDARD SERVE OF A PARTICULAR FOOD ITEM' succeeded.

SQL> comment on column food_item.food_item_type
is
  'Type of the food item ("B" = Beverage, "E" = Entree, "M" = Main, "D" = Dessert)'
  ;

Comment on column food_item.food_item_type "B" succeeded.

SQL> alter table food_item add constraint food_item_pk primary key ( food_item_num );

Table FOOD_ITEM altered.

SQL> create
  table large
  (
    food_item_num           number (5) not null ,
    main_large_serve_cost   number (14,2) not null ,
    main_large_energy_in_kj number (8,2) not null
  ) ;

Table LARGE created.

SQL> comment on column large.food_item_num
is
  'Unique number for each food item (ex: 1. omelette, etc)' ;

Comment on column large.food_item_num 'UNIQUE NUMBER FOR EACH FOOD ITEM EX: 1. OMELETTE, ETC)' succeeded.

SQL> comment on column large.main_large_serve_cost
is
  'Price for the large serve of a particular main' ;

Comment on column large.main_large_serve_cost 'PRICE FOR THE LARGE SERVE OF A PARTICULAR MAIN' succeeded.

SQL> comment on column large.main_large_energy_in_kj
is
  'The approximate amount of energy (Kj) contained in the large serve of a particular main'
  ;

Comment on column large.main_large_energy_in_kj 'THE APPROXIMATE AMOUNT OF ENERGY KJ) CONTAINED IN THE LARGE SERVE OF A PARTICULAR MAIN' succeeded.

SQL> alter table large add constraint large_pk primary key ( food_item_num ) ;

Table LARGE altered.

SQL> create
  table main
  (
    food_item_num           number (5) not null ,
    main_is_vegetarian      char (1) not null ,
    main_is_gluten_free     char (1) not null ,
    main_available_in_small char (1) ,
    main_available_in_large char (1)
  ) ;

Table MAIN created.

SQL> alter table main add constraint chk_main_is_vegetarian check (
main_is_vegetarian in ('N', 'Y')) ;

Table MAIN altered.

SQL> alter table main add constraint chk_main_is_gluten_free check (
main_is_gluten_free in ('N', 'Y')) ;

Table MAIN altered.

SQL> alter table main add constraint chk_main_available_in_small check (
main_available_in_small in ('N', 'Y')) ;

Table MAIN altered.

SQL> alter table main add constraint chk_main_available_in_large check (
main_available_in_large in ('N', 'Y')) ;

Table MAIN altered.

SQL> comment on column main.food_item_num
is
  'Unique number for each food item (ex: 1. omelette, etc)' ;

Comment on column main.food_item_num 'UNIQUE NUMBER FOR EACH FOOD ITEM EX: 1. OMELETTE, ETC)' succeeded.

SQL> comment on column main.main_is_vegetarian
is
  'Determine whether the main is vegetarian ("Y" = Yes, "N" = No)' ;

Comment on column main.main_is_vegetarian "Y" succeeded.

SQL> comment on column main.main_is_gluten_free
is
  'Determine whether the main is gluten free ("Y" = Yes, "N" = No)' ;

Comment on column main.main_is_gluten_free "Y" succeeded.

SQL> comment on column main.main_available_in_small
is
  'Determine whether the main is available in small serve size ("Y" = Yes, "N" = No)'
  ;

Comment on column main.main_available_in_small "Y" succeeded.

SQL> comment on column main.main_available_in_large
is
  'Determine whether the main is available in large serve size ("Y" = Yes, "N" = No)'
  ;

Comment on column main.main_available_in_large "Y" succeeded.

SQL> alter table main add constraint main_pk primary key ( food_item_num ) ;

Table MAIN altered.

SQL> create
  table seat
  (
    tables_num number (5) not null ,
    diner_num  number (5) not null ,
    seat_num   number (5) not null
  ) ;

Table SEAT created.

SQL> comment on column seat.tables_num
is
  'Unique number for each table' ;

Comment on column seat.tables_num 'UNIQUE NUMBER FOR EACH TABLE' succeeded.

SQL> comment on column seat.diner_num
is
  'Unique number for each diner (in this case each diner number could be a representative for another diner)'
  ;

Comment on column seat.diner_num 'UNIQUE NUMBER FOR EACH DINER IN THIS CASE EACH DINER NUMBER COULD BE A REPRESENTATIVE FOR ANOTHER DINER)' succeeded.

SQL> comment on column seat.seat_num
is
  'Unique seat number for each diner sitting at a specific table number' ;

Comment on column seat.seat_num 'UNIQUE SEAT NUMBER FOR EACH DINER SITTING AT A SPECIFIC TABLE NUMBER' succeeded.

SQL> alter table seat add constraint seat_pk primary key ( seat_num, tables_num,
diner_num ) ;

Table SEAT altered.

SQL> create
  table small
  (
    food_item_num           number (5) not null ,
    main_small_serve_cost   number (14,2) not null ,
    main_small_energy_in_kj number (8,2) not null
  ) ;

Table SMALL created.

SQL> comment on column small.food_item_num
is
  'Unique number for each food item (ex: 1. omelette, etc)' ;

Comment on column small.food_item_num 'UNIQUE NUMBER FOR EACH FOOD ITEM EX: 1. OMELETTE, ETC)' succeeded.

SQL> comment on column small.main_small_serve_cost
is
  'Price for the small serve of a particular main' ;

Comment on column small.main_small_serve_cost 'PRICE FOR THE SMALL SERVE OF A PARTICULAR MAIN' succeeded.

SQL> comment on column small.main_small_energy_in_kj
is
  'The approximate amount of energy (Kj) contained in the small serve of a particular main'
  ;

Comment on column small.main_small_energy_in_kj 'THE APPROXIMATE AMOUNT OF ENERGY KJ) CONTAINED IN THE SMALL SERVE OF A PARTICULAR MAIN' succeeded.

SQL> alter table small add constraint small_pk primary key ( food_item_num ) ;

Table SMALL altered.

SQL> create
  table tables
  (
    tables_num           number (5) not null ,
    tables_seat_capacity number (5) not null ,
    tables_location      varchar2 (20) not null
  ) ;

Table TABLES created.

SQL> comment on column tables.tables_num
is
  'Unique number for each table' ;

Comment on column tables.tables_num 'UNIQUE NUMBER FOR EACH TABLE' succeeded.

SQL> comment on column tables.tables_seat_capacity
is
  'Table seating capacity (how many diners/people can sit at the table)' ;

Comment on column tables.tables_seat_capacity 'TABLE SEATING CAPACITY HOW MANY DINERS/PEOPLE CAN SIT AT THE TABLE)' succeeded.

SQL> comment on column tables.tables_location
is
  'Table location (near the windows, etc)' ;

Comment on column tables.tables_location 'TABLE LOCATION NEAR THE WINDOWS, ETC)' succeeded.

SQL> alter table tables add constraint tables_pk primary key ( tables_num ) ;

Table TABLES altered.

SQL> alter table beverage add constraint beverage_food_item_fk foreign key (
food_item_num ) references food_item ( food_item_num ) ;

Table BEVERAGE altered.

SQL> alter table dessert add constraint dessert_food_item_fk foreign key (
food_item_num ) references food_item ( food_item_num ) ;

Table DESSERT altered.

SQL> alter table diner_food_item add constraint diner_food_item_fk foreign key (
food_item_num ) references food_item ( food_item_num ) ;

Table DINER_FOOD_ITEM altered.

SQL> alter table entree add constraint entree_food_item_fk foreign key (
food_item_num ) references food_item ( food_item_num ) ;

Table ENTREE altered.

SQL> alter table diner_food_item add constraint food_item_diner_fk foreign key (
diner_num ) references diner ( diner_num ) ;

Table DINER_FOOD_ITEM altered.

SQL> alter table large add constraint large_main_fk foreign key ( food_item_num )
references main ( food_item_num ) ;

Table LARGE altered.

SQL> alter table main add constraint main_food_item_fk foreign key ( food_item_num )
references food_item ( food_item_num ) ;

Table MAIN altered.

SQL> alter table seat add constraint seat_diner_fk foreign key ( diner_num )
references diner ( diner_num ) ;

Table SEAT altered.

SQL> alter table seat add constraint seat_tables_fk foreign key ( tables_num )
references tables ( tables_num ) ;

Table SEAT altered.

SQL> alter table small add constraint small_main_fk foreign key ( food_item_num )
references main ( food_item_num ) ;

Table SMALL altered.

SQL> create or replace trigger arc_fk_food_item_subtypes_main before
  insert
  or
  update
    of food_item_num on main for each row declare d char (1);
  begin
    select
      a.food_item_type
    into
      d
    from
      food_item a
    where
      a.food_item_num = :new.food_item_num;
    if (d            is null or d <> 'M') then
      raise_application_error(-20223,
      'FK main_food_item_FK in Table main violates Arc constraint on Table food_item - discriminator column food_item_type doesn''t have value ''M'''
      );
    end if;
  exception
  when no_data_found then
    null;
  when others then
    raise;
  end;
  
/

Trigger ARC_FK_FOOD_ITEM_SUBTYPES_MAIN compiled

SQL> create or replace trigger arc_fk_food_item_subty_dessert before
  insert
  or
  update
    of food_item_num on dessert for each row declare d char (1);
  begin
    select
      a.food_item_type
    into
      d
    from
      food_item a
    where
      a.food_item_num = :new.food_item_num;
    if (d            is null or d <> 'D') then
      raise_application_error(-20223,
      'FK dessert_food_item_FK in Table dessert violates Arc constraint on Table food_item - discriminator column food_item_type doesn''t have value ''D'''
      );
    end if;
  exception
  when no_data_found then
    null;
  when others then
    raise;
  end;
  
/

Trigger ARC_FK_FOOD_ITEM_SUBTY_DESSERT compiled

SQL> create or replace trigger arc_fk_food_item_subtyp_entree before
  insert
  or
  update
    of food_item_num on entree for each row declare d char (1);
  begin
    select
      a.food_item_type
    into
      d
    from
      food_item a
    where
      a.food_item_num = :new.food_item_num;
    if (d            is null or d <> 'E') then
      raise_application_error(-20223,
      'FK entree_food_item_FK in Table entree violates Arc constraint on Table food_item - discriminator column food_item_type doesn''t have value ''E'''
      );
    end if;
  exception
  when no_data_found then
    null;
  when others then
    raise;
  end;
  
/

Trigger ARC_FK_FOOD_ITEM_SUBTYP_ENTREE compiled

SQL> create or replace trigger arc_fk_food_item_subt_beverage before
  insert
  or
  update
    of food_item_num on beverage for each row declare d char (1);
  begin
    select
      a.food_item_type
    into
      d
    from
      food_item a
    where
      a.food_item_num = :new.food_item_num;
    if (d            is null or d <> 'B') then
      raise_application_error(-20223,
      'FK beverage_food_item_FK in Table beverage violates Arc constraint on Table food_item - discriminator column food_item_type doesn''t have value ''B'''
      );
    end if;
  exception
  when no_data_found then
    null;
  when others then
    raise;
  end;
  
/

Trigger ARC_FK_FOOD_ITEM_SUBT_BEVERAGE compiled

SQL> create sequence diner_diner_num_seq start with 1 nocache order ;

Sequence DINER_DINER_NUM_SEQ created.

SQL> create sequence diner_food_item_diner_food_ite start with 1 nocache order ;

Sequence DINER_FOOD_ITEM_DINER_FOOD_ITE created.

SQL> create sequence food_item_food_item_num_seq start with 1 nocache order ;

Sequence FOOD_ITEM_FOOD_ITEM_NUM_SEQ created.

SQL> create sequence tables_tables_num_seq start with 1 nocache order ;

Sequence TABLES_TABLES_NUM_SEQ created.

SQL> -- Oracle SQL Developer Data Modeler Summary Report: 
SQL> -- 
SQL> -- CREATE TABLE                            11
SQL> -- CREATE INDEX                             0
SQL> -- ALTER TABLE                             29
SQL> -- CREATE VIEW                              0
SQL> -- ALTER VIEW                               0
SQL> -- CREATE PACKAGE                           0
SQL> -- CREATE PACKAGE BODY                      0
SQL> -- CREATE PROCEDURE                         0
SQL> -- CREATE FUNCTION                          0
SQL> -- CREATE TRIGGER                           4
SQL> -- ALTER TRIGGER                            0
SQL> -- CREATE COLLECTION TYPE                   0
SQL> -- CREATE STRUCTURED TYPE                   0
SQL> -- CREATE STRUCTURED TYPE BODY              0
SQL> -- CREATE CLUSTER                           0
SQL> -- CREATE CONTEXT                           0
SQL> -- CREATE DATABASE                          0
SQL> -- CREATE DIMENSION                         0
SQL> -- CREATE DIRECTORY                         0
SQL> -- CREATE DISK GROUP                        0
SQL> -- CREATE ROLE                              0
SQL> -- CREATE ROLLBACK SEGMENT                  0
SQL> -- CREATE SEQUENCE                          4
SQL> -- CREATE MATERIALIZED VIEW                 0
SQL> -- CREATE SYNONYM                           0
SQL> -- CREATE TABLESPACE                        0
SQL> -- CREATE USER                              0
SQL> -- 
SQL> -- DROP TABLESPACE                          0
SQL> -- DROP DATABASE                            0
SQL> -- 
SQL> -- REDACTION POLICY                         0
SQL> -- 
SQL> -- ORDS DROP SCHEMA                         0
SQL> -- ORDS ENABLE SCHEMA                       0
SQL> -- ORDS ENABLE OBJECT                       0
SQL> -- 
SQL> -- ERRORS                                   0
SQL> -- WARNINGS                                 0
SQL> spool off
